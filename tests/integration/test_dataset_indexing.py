import json
import uuid

from azure.storage.blob import BlobServiceClient

from bulk_data_service.checker import checker_run
from bulk_data_service.dataset_indexing import get_index_name, get_minimal_index_fields
from helpers.helpers import get_and_clear_up_context  # noqa: F401
from utilities.azure import get_azure_container_name


def test_index_creation(get_and_clear_up_context):  # noqa: F811

    context = get_and_clear_up_context

    context["DATA_REGISTRY_BASE_URL"] = "http://localhost:3000/registration/datasets-01"
    checker_run(context, {})

    blob_service_client = BlobServiceClient.from_connection_string(context["AZURE_STORAGE_CONNECTION_STRING"])

    zip_container_name = get_azure_container_name(context, "zip")

    minimal_index_name = get_index_name(context, "minimal")
    full_index_name = get_index_name(context, "full")

    xml_blob = blob_service_client.get_blob_client(zip_container_name, minimal_index_name)
    assert xml_blob.exists()

    zip_blob = blob_service_client.get_blob_client(zip_container_name, full_index_name)
    assert zip_blob.exists()

    blob_service_client.close()


def test_minimal_index_creation(get_and_clear_up_context):  # noqa: F811
    context = get_and_clear_up_context

    context["DATA_REGISTRY_BASE_URL"] = "http://localhost:3000/registration/datasets-01"
    datasets_in_bds = {}
    checker_run(context, datasets_in_bds)

    blob_service_client = BlobServiceClient.from_connection_string(context["AZURE_STORAGE_CONNECTION_STRING"])

    zip_container_name = get_azure_container_name(context, "zip")

    minimal_index_name = get_index_name(context, "minimal")

    minimal_index_blob = blob_service_client.get_blob_client(zip_container_name, minimal_index_name)

    minimal_index = json.loads(minimal_index_blob.download_blob().readall())

    dataset = datasets_in_bds[uuid.UUID("c8a40aa5-9f31-4bcf-a36f-51c1fc2cc159")]

    assert dataset["name"] in minimal_index["datasets"]

    index_item = minimal_index["datasets"][dataset["name"]]

    for field in get_minimal_index_fields(context):
        assert index_item[field] == str(dataset[field])

    # -2 because of the two autogenerated fields
    assert len(index_item.keys()) - 2 == len(get_minimal_index_fields(context))

    blob_service_client.close()


def test_full_index_creation(get_and_clear_up_context):  # noqa: F811
    context = get_and_clear_up_context

    context["DATA_REGISTRY_BASE_URL"] = "http://localhost:3000/registration/datasets-01"
    datasets_in_bds = {}
    checker_run(context, datasets_in_bds)

    blob_service_client = BlobServiceClient.from_connection_string(context["AZURE_STORAGE_CONNECTION_STRING"])

    zip_container_name = get_azure_container_name(context, "zip")

    full_index_name = get_index_name(context, "full")

    full_index_blob = blob_service_client.get_blob_client(zip_container_name, full_index_name)

    full_index = json.loads(full_index_blob.download_blob().readall())

    dataset = datasets_in_bds[uuid.UUID("c8a40aa5-9f31-4bcf-a36f-51c1fc2cc159")]

    assert dataset["name"] in full_index["datasets"]

    full_index_item = full_index["datasets"][dataset["name"]]

    for field in dataset.keys():
        if isinstance(dataset[field], uuid.UUID):
            assert uuid.UUID(full_index_item[field]) == dataset[field]
        elif isinstance(dataset[field], str):
            assert full_index_item[field] == dataset[field]

    # -2 because of the two autogenerated fields
    assert len(full_index_item.keys()) - 2 == len(dataset.keys())

    blob_service_client.close()
